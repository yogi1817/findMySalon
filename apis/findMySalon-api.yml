openapi: 3.0.2
info:
  title: Barber Services API
  description: API used for access FindMySalon Services
  version: Initial
servers:
  - url: http://localhost:8080
    description: local
tags:
  - name: barber
  - name: customer
  - name: otp
  - name: security
paths:
  /barber/register:
    post:
      operationId: registerBarber
      tags:
        - barber
      summary: Register a barber
      description: Register a barber
      #      parameters:
      #        - in: header
      #          name: clientHost
      #          schema:
      #            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBarberRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterBarberResponse'
  /barber/barbersCount:
    post:
      operationId: addBarberCountToday
      tags:
        - barber
      summary: Add barber count for today
      description: This service will add barber count for today and update in DB to calculate correct waittime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DailyBarbersRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyBarbersResponse'
  /barber/services/{serviceId}/cost/{cost}/time/{time}:
    post:
      operationId: addServicesForBarber
      tags:
        - barber
      summary: This api will add services to a barber like haircut etc
      description: This api will add services to a barber like haircut etc
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: cost
          required: true
          schema:
            type: integer
        - in: path
          name: time
          schema:
            type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberServicesResponse'
  /barber/calendar:
    post:
      operationId: addBarberCalendar
      tags:
        - barber
      summary: This api will add barber cal entry
      description: You can add barber calaner like what days are holidays and what are the regular working hours. If you are providing calendar day them its opena nd close time is required. If you are providing calander Date for holiday then open close time is not required as the salon will be closed on that day.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarberCalendarRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberCalendarResponse'
  /barber/address:
    post:
      operationId: addBarbersAddress
      tags:
        - barber
      summary: This api will add barber address
      description: This api will add barber address, a Barber can have more than 1 address as well
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarberAddressRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberAddressResponse'
  /barber/services/register:
    post:
      tags:
        - barber
      summary: This api will add services like haircut etc.
      description: These services will be later added into barber profiles based on what all service barber provides
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarberServicesRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberServicesResponse'
  /customer/register:
    post:
      operationId: registerCustomer
      tags:
        - customer
      summary: Register a customer
      description: Register a customer
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterCustomerResponse'
  /customer/favourite:
    post:
      operationId: customerFavourite
      tags:
        - customer
      summary: Adds a favourite barber into customer profile
      description: Adds a favourite barber into customer profile
      parameters:
        - in: query
          name: barberId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerFavouriteBarberResponse'
  /customer/authenticate:
    post:
      operationId: authenticateCustomer
      tags:
        - customer
      summary: This methos returns Outh related data
      description: This method will return basic user details with jwt token
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /customer/updatepassword:
    post:
      operationId: updatePassword
      tags:
        - customer
      summary: This method updates the password of user
      description: Update passowrd ofr a user
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePasswordResponse'
        400:
          description: Bad Request
  /checkin/barber/{barberId}:
    post:
      operationId: checkInCustomerByCustomer
      tags:
        - checkIn
      summary: A customer checking in at the barber
      description: Service takes the OAuth jwt token for the customer and check him in at barber and at time x mins(calculated at run time) from now
      parameters:
        - in: path
          name: barberId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCheckInResponse'
  /checkin/customer/{customerId}:
    post:
      operationId: checkInCustomerByBarber
      tags:
        - checkIn
      summary: A baber checking in a customer at the salon
      description: Service takes the OAuth jwt token for the barber and check in customer at that barber and at time x mins(calculated at run time) from now
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCheckInResponse'
  /checkin/barber/{barberId}/waittime:
    get:
      operationId: waitTimeEstimateAtBarber
      tags:
        - checkIn
      summary: This api will find the wait time at a Salon
      description: This api will find the wait time at a Salon
      parameters:
        - in: path
          name: barberId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberWaitTimeResponse'
  /checkin/customer/checkout:
    post:
      operationId: checkOutCustomer
      tags:
        - checkIn
      summary: This api will checkut customer from barber waitlist
      description: This api will checkut customer from barber waitlist
      parameters:
        - in: query
          name: customerId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCheckoutResponse'
  /checkin/barbers/waittime/forlocation:
    post:
      operationId: findAllBarbersAtZip
      tags:
        - checkIn
      summary: This method will return all barbers near a certain distance
      description: This method will return all barbers near a certain distance
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarberWaitTimeRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarbersWaitTimeResponse'
  /otp/postlogin:
    get:
      operationId:  sendOtpOnEmailOrPhoneForLoggedInUser
      tags:
        - otp
      summary: This api will send otp to email address or phone number for a logged in user
      description: This api will send otp to to email address or phone number for a logged in user
      parameters:
        - in: query
          name: channel
          required: true
          schema:
            type: string
            enum:
              - mobile
              - email
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
  /otp/forgotpassword:
    get:
      operationId: generateOtpOnEmailOrPhonePrePassword
      tags:
        - otp
      summary: This api will send otp to email address for a pre password page
      description: This api will send otp to email address for a pre password page
      parameters:
        - in: query
          name: email
          schema:
            type: string
        - in: query
          name: phone
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
  /otp/validate:
    get:
      operationId: validateOtp
      tags:
        - otp
      summary: This api will validate the given OTP.
      description: This api will validate the otp stored in cache
      parameters:
        - in: query
          name: otpNumber
          required: true
          schema:
            type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
components:
  schemas:
    RegisterBarberRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        storeName:
          type: string
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
        - storeName
    RegisterBarberResponse:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    DailyBarbersRequest:
      type: object
      properties:
        barbersCount:
          type: integer
        barbersDescription:
          type: string
      required:
        - barbersCount
    DailyBarbersResponse:
      type: object
      properties:
        barbersCount:
          type: integer
        actionResult:
          type: string
    BarberServicesResponse:
      type: object
      properties:
        serviceName:
          type: string
        message:
          type: string
    BarberCalendarRequest:
      type: object
      properties:
        salonOpensAt:
          type: string
        salonClosesAt:
          type: string
        calendarDay:
          type: string
          nullable: true
          enum:
            - Sunday
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - null
        calendarDate:
          type: string
    BarberCalendarResponse:
      type: object
      properties:
        email:
          type: string
        message:
          type: string
    BarberAddressRequest:
      type: object
      properties:
        addressLineOne:
          type: string
        addressLineTwo:
          type: string
        city:
          type: string
        zip:
          type: integer
        state:
          type: string
        country:
          type: string
      required:
        - addressLineOne
        - city
        - zip
        - country
    BarberAddressResponse:
      type: object
      properties:
        email:
          type: string
        message:
          type: string
    BarberServicesRequest:
      type: object
      properties:
        serviceName:
          type: string
        serviceDescription:
          type: string
    RegisterCustomerRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
    RegisterCustomerResponse:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        message:
          type: string
    CustomerFavouriteBarberResponse:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AuthenticationResponse:
      type: object
      properties:
        email:
          type: string
        jwtToken:
          type: string
    UpdatePasswordRequest:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        otpNumber:
          type: integer
        newPassword:
          type: string
      required:
        - otpNumber
        - newPassword
    UpdatePasswordResponse:
      type: object
      properties:
        jwtToken:
          type: string
        message:
          type: string
    CustomerCheckInResponse:
      type: object
      properties:
        customerId:
          type: string
        message:
          type: string
    BarberWaitTimeResponse:
      type: object
      properties:
        salonName:
          type: string
        waitTime:
          type: string
    CustomerCheckoutResponse:
      type: object
      properties:
        message:
          type: string
    BarberWaitTimeRequest:
      type: object
      properties:
        zipCode:
          type: string
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
        distance:
          type: number
          format: double
    BarbersWaitTimeResponse:
      type: object
      properties:
        message:
          type: string
        barberDetails:
          type: array
          items:
            $ref: '#/components/schemas/BarberDetails'
    BarberDetails:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        storeName:
          type: string
        email:
          type: string
        phone:
          type: string
        addressLineOne:
          type: string
        addressLineTwo:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        distance:
          type: number
          format: double
        waitTime:
          type: string
    OtpResponse:
      type: object
      properties:
        emailOrPhone:
          type: string
        message:
          type: string