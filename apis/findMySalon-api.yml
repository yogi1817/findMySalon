openapi: 3.0.2
info:
  title: Barber Services API
  description: API used for access FindMySalon Services
  version: Initial
servers:
  - url: http://localhost:8081
    description: local
  - url: https://findmysalon.herokuapp.com
    description: heroku
tags:
  - name: barber
  - name: customer
  - name: otp
  - name: security
  - name: devices
  - name: user
paths:
  /barber/register:
    post:
      operationId: registerBarber
      tags:
        - barber
      security:
        - bearerAuth: [ ]
      summary: Register a barber
      description: Register a barber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBarberRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterBarberResponse'
  /barber/barbersCount:
    post:
      operationId: addBarberCountToday
      tags:
        - barber
      summary: Add barber count for today
      description: This service will add barber count for today and update in DB to calculate correct waittime
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DailyBarbersRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyBarbersResponse'
        '401':
          description: Not authenticated
        '403':
          description: Access token does not have the required scope
  /barber/services/{serviceId}/cost/{cost}/time/{time}:
    post:
      operationId: addServicesForBarber
      tags:
        - barber
      security:
        - bearerAuth: [ ]
      summary: This api will add services to a barber like haircut etc
      description: This api will add services to a barber like haircut etc
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: cost
          required: true
          schema:
            type: integer
        - in: path
          name: time
          required: true
          schema:
            type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberServicesResponse'
  /barber/calendar:
    post:
      operationId: addBarberCalendar
      tags:
        - barber
      summary: This api will add barber cal entry
      description: You can add barber calaner like what days are holidays and what are the regular working hours. If you are providing calendar day them its opena nd close time is required. If you are providing calander Date for holiday then open close time is not required as the salon will be closed on that day.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarberCalendarRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberCalendarResponse'
  /barber/services/register:
    post:
      operationId: addServices
      tags:
        - barber
      summary: This api will add services like haircut etc.
      description: These services will be later added into barber profiles based on what all service barber provides
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarberServicesRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberServicesResponse'
  /user/profile:
    get:
      operationId: getUserProfile
      tags:
        - user
      summary: Get User details, auser can be barber or Customer
      description: Get User details, auser can be barber or Customer
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: barberId
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          name: customerId
          schema:
            type: integer
            format: int64
          required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /user/address:
    post:
      operationId: addUserAddress
      tags:
        - user
      summary: This api will add user address
      description: This api will add user address, a barber can have more than 1 address as well
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressResponse'
  /customer/authenticate:
    post:
      operationId: authenticateCustomer
      tags:
        - customer
      summary: This method returns Outh related data
      description: This method will return basic user details with jwt token
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /barber/authenticate:
    post:
      operationId: authenticateBarber
      tags:
        - barber
      summary: This method returns Outh related data
      description: This method will return basic user details with jwt token
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /barber/refresh:
    post:
      operationId: refreshBarber
      tags:
        - barber
      summary: This method returns Outh related data
      description: This method will return basic user details with jwt token
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /customer/refresh:
    post:
      operationId: refreshCustomer
      tags:
        - customer
      summary: This method returns Outh related data
      description: This method will return basic user details with jwt token
      parameters:
        - in: header
          name: clientHost
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /user/updatepassword:
    post:
      operationId: updatePassword
      tags:
        - user
      summary: This method updates the password of user
      description: Update passowrd of a user
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePasswordResponse'
        400:
          description: Bad Request
  /customer/register:
    post:
      operationId: registerCustomer
      tags:
        - customer
      security:
        - bearerAuth: [ ]
      summary: Register a customer
      description: Register a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterCustomerResponse'
  /customer/favourite:
    post:
      operationId: customerFavourite
      tags:
        - customer
      summary: Adds a favourite barber into customer profile
      description: Adds a favourite barber into customer profile
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: barberId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerFavouriteBarberResponse'
  /checkin/barber:
    post:
      operationId: checkInCustomerByCustomer
      tags:
        - checkIn
      summary: A customer checking in at the barber
      description: Service takes the OAuth jwt token for the customer and check him in at barber and at time x mins(calculated at run time) from now
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: barberId
          schema:
            type: integer
            format: int64
        - in: header
          name: timeZone
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCheckInResponse'
  /checkin/customer/{customerId}:
    post:
      operationId: checkInCustomerByBarber
      tags:
        - checkIn
      summary: A baber checking in a customer at the salon
      description: Service takes the OAuth jwt token for the barber and check in customer at that barber and at time x mins(calculated at run time) from now
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: integer
            format: int64
        - in: header
          name: timeZone
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCheckInResponse'
  /checkin/barber/waittime:
    get:
      operationId: waitTimeEstimateAtBarber
      tags:
        - checkIn
      summary: This api will find the wait time at a Salon for a given barberID.
      description: If the AuthHeader is for Customer, and no barberId is passed it will check the favourite barber, if authHeader is for Barber it will return the wait time
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: barberId
          required: false
          schema:
            type: integer
            format: int64
        - in: header
          name: timeZone
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberWaitTimeResponse'
  /checkin/customer/checkout:
    post:
      operationId: checkOutCustomer
      tags:
        - checkIn
      summary: This api will checkut customer from barber waitlist
      description: This api will checkut customer from barber waitlist
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: customerId
          schema:
            type: integer
            format: int64
          required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCheckoutResponse'
  /checkin/barbers/waittime/forlocation:
    post:
      operationId: findAllBarbersAtZip
      tags:
        - checkIn
      summary: This method will return all barbers near a certain distance
      description: This method will return all barbers near a certain distance
      security:
        - bearerAuth: [ ]
      parameters:
        - in: header
          name: timeZone
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarberWaitTimeRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarbersWaitTimeResponse'
  /checkin/customer/currentwaittime:
    get:
      operationId: currentWaitTimeEstimateForCustomer
      tags:
        - checkIn
      summary: This api will find the current wait time for a customer at the checkedin barber.
      description: This api will find the current wait time for a customer at the checkedin barber.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: barberId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarberWaitTimeResponse'
  /checkin/barber/listCustomer:
    get:
      operationId: getCheckedInCustomer
      tags:
        - checkIn
      summary: This api will return all the checkedin customer
      description: This api will return all the checkedin customer
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckInCustomers'
  /otp/postlogin:
    get:
      operationId: sendOtpOnEmailOrPhoneForLoggedInUser
      tags:
        - otp
      summary: This api will send otp to email address or phone number for a logged in user
      description: This api will send otp to to email address or phone number for a logged in user
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: channel
          required: true
          schema:
            type: string
            enum:
              - mobile
              - email
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
  /otp/forgotpassword:
    get:
      operationId: generateOtpOnEmailOrPhonePrePassword
      tags:
        - otp
      summary: This api will send otp to email address for a pre password page
      description: This api will send otp to email address for a pre password page
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
        - in: query
          name: phone
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
  /otp/validate/postlogin:
    get:
      operationId: validateOtpPostLogin
      tags:
        - otp
      summary: This api will validate the given OTP for a logged in user.
      description: This api will validate the otp stored in cache.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: otpNumber
          required: true
          schema:
            type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
  /otp/validate/prepassword:
    get:
      operationId: validateOtpPreLogin
      tags:
        - otp
      summary: This api will validate the given OTP for a pre password user.
      description: This api will validate the otp stored in cache.
      parameters:
        - in: query
          name: otpNumber
          required: true
          schema:
            type: integer
        - in: query
          name: emailAddress
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
  /devices/deviceType/{nativeDeviceId}:
    get:
      operationId: getNativeDeviceInformation
      tags:
        - devices
      summary: Returns application information pertaining to a native device Id
      parameters:
        - name: nativeDeviceId
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceTypeResponse'
  /devices/{email}:
    get:
      operationId: getAllDevices
      tags:
        - devices
      summary: Gets a list of all user devices associated with a scorecard
      parameters:
        - name: email
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInfoResponse'
  /devices/{nativeDeviceId}:
    post:
      operationId: newRegisterDevice
      tags:
        - devices
      summary: Register or update device details
      parameters:
        - name: nativeDeviceId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDeviceResponse'
        '400':
          description: Bad request to register device to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDeviceResponse'
    delete:
      operationId: deregisterDevice
      tags:
        - devices
      summary: Handle device de-registration event
      parameters:
        - name: nativeDeviceId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '404':
          description: Device not found
#  /alexa/voice:
#    post:
#      operationId: alexaVoiceEntry
#      tags:
#        - alexa
#      summary: This service is the entry point for all alexa voice services
#      description: This service is the entry point for all alexa voice services
#      parameters:
#        - in: header
#          name: SignatureCertChainUrl
#          required: true
#          schema:
#            type: string
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/AlexaRequest'
#      responses:
#        200:
#          description: success
#          content:
components:
  schemas:
    RegisterBarberRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
        storeName:
          type: string
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
        - storeName
    RegisterBarberResponse:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
    DailyBarbersRequest:
      type: object
      properties:
        barbersCount:
          type: integer
        barbersDescription:
          type: string
      required:
        - barbersCount
    DailyBarbersResponse:
      type: object
      properties:
        barbersCount:
          type: integer
        actionResult:
          type: string
    BarberServicesResponse:
      type: object
      properties:
        serviceName:
          type: string
        message:
          type: string
    BarberCalendarRequest:
      type: object
      properties:
        salonOpensAt:
          type: string
        salonClosesAt:
          type: string
        calendarDay:
          type: string
          nullable: true
          enum:
            - SUNDAY
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - null
        calendarDate:
          type: string
    BarberCalendarResponse:
      type: object
      properties:
        email:
          type: string
          format: email
        message:
          type: string
    UserAddressRequest:
      type: object
      properties:
        addressLineOne:
          type: string
        addressLineTwo:
          type: string
        city:
          type: string
        zip:
          type: integer
        state:
          type: string
        country:
          type: string
      required:
        - addressLineOne
        - city
        - zip
        - country
    UserAddressResponse:
      type: object
      properties:
        email:
          type: string
          format: email
        message:
          type: string
    BarberServicesRequest:
      type: object
      properties:
        serviceName:
          type: string
        serviceDescription:
          type: string
    RegisterCustomerRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
    RegisterCustomerResponse:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        message:
          type: string
    CustomerFavouriteBarberResponse:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    RefreshRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        refreshToken:
          type: string
      required:
        - refreshToken
    AuthenticationResponse:
      type: object
      properties:
        email:
          type: string
          format: email
        accessToken:
          type: string
        refreshToken:
          type: string
    UpdatePasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        otpNumber:
          type: integer
        newPassword:
          type: string
      required:
        - otpNumber
        - newPassword
    UpdatePasswordResponse:
      type: object
      properties:
        message:
          type: string
    CustomerCheckInResponse:
      type: object
      properties:
        customerId:
          type: string
        message:
          type: string
    BarberWaitTimeResponse:
      type: object
      properties:
        salonName:
          type: string
        waitTime:
          type: string
    CustomerCheckoutResponse:
      type: object
      properties:
        message:
          type: string
    BarberWaitTimeRequest:
      type: object
      properties:
        zipCode:
          type: string
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
        distance:
          type: number
          format: double
    BarbersWaitTimeResponse:
      type: object
      properties:
        message:
          type: string
        barberDetails:
          type: array
          items:
            $ref: '#/components/schemas/BarberDetails'
    BarberDetails:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        storeName:
          type: string
        barberId:
          type: integer
          format: int64
        email:
          type: string
          format: email
        phone:
          type: string
        distance:
          type: number
          format: double
        waitTime:
          type: string
        isShopOpen:
          type: boolean
        storeCloseIn1HourFlag:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressInfo'
        calendar:
          type: object
          properties:
            weeklySchedule:
              type: array
              items:
                $ref: '#/components/schemas/DayAndTimeInfo'
            holidays:
              type: array
              items:
                type: string
                format: date
                example: "2020-07-04"
    OtpResponse:
      type: object
      properties:
        emailOrPhone:
          type: string
        message:
          type: string
        verified:
          type: boolean
    DeviceInfoResponse:
      description: Response object
      type: object
      properties:
        devices:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              nativeDeviceId:
                type: string
              deviceTypeId:
                type: integer
              deviceModel:
                type: string
              gmtOffsetMinutes:
                type: integer
              osVersion:
                type: string
              pushNotificationsEnabled:
                type: boolean
              pushToken:
                type: string
              applicationVersion:
                type: string
              email:
                type: string
              lastLoggedInDate:
                type: string
                format: date-time
              dateAdded:
                type: string
                format: date-time
              dateUpdated:
                type: string
                format: date-time
    DeviceTypeResponse:
      type: object
      properties:
        deviceType:
          type: integer
        applicationVersionCode:
          type: integer
    AppVersionRequest:
      type: object
      properties:
        device_type:
          type: integer
          description: "1 for iOS, 2 for Android"
          example: 1
        version_name:
          type: string
          example: "4.8.1"
        version_code:
          type: integer
          example: 765
        effective_date:
          type: string
          format: date
          example: "2020-07-04"
        release_date:
          type: string
          format: date
          example: "2020-07-04"
          description: "If this value is not supplied, the value of effective_date will be used"
      required:
        - device_type
        - version_name
        - version_code
        - effective_date
    RegisterDeviceRequest:
      type: object
      properties:
        advertisingOptOut:
          type: boolean
        applicationId:
          type: integer
        applicationVersion:
          type: string
        deviceTypeId:
          type: integer
        deviceModel:
          type: string
        formFactorId:
          type: integer
        gmtOffsetMinutes:
          type: integer
        gpsCapable:
          type: boolean
        gpsEnabled:
          type: boolean
        gpsTrackingCapable:
          type: boolean
        gpsTrackingEnabled:
          type: boolean
        horizontalResolution:
          type: integer
        mobileWalletCapable:
          type: boolean
        mobileWalletEnabled:
          type: boolean
        osVersion:
          type: string
        pushNotificationCapable:
          type: boolean
        pushToken:
          type: string
        email:
          type: string
        timezone:
          type: string
        verticalResolution:
          type: integer
    RegisterDeviceResponse:
      type: object
      properties:
        message:
          type: string
    DayAndTimeInfo:
      type: object
      properties:
        dayOfWeek:
          $ref: '#/components/schemas/DayOfWeek'
        salonOpenTime:
          type: string
          example: "09:30 PM"
        salonCloseTime:
          type: string
          example: "20:30 PM"
    DayOfWeek:
      type: string
      enum:
        - SUNDAY
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
    UserProfile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        phone:
          type: string
        storeName:
          type: string
        favouriteSalonId:
          type: integer
          format: int64
        verified:
          type: boolean
        checkedInBarberId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        waitTime:
          type: string
        calendar:
          type: object
          properties:
            weeklySchedule:
              type: array
              items:
                $ref: '#/components/schemas/DayAndTimeInfo'
            holidays:
              type: array
              items:
                type: string
                format: date
                example: "2020-07-04"
        address:
          $ref: '#/components/schemas/AddressInfo'
    AddressInfo:
      type: object
      properties:
        addressLineOne:
          type: string
        addressLineTwo:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
    CheckInCustomers:
      type: array
      items:
        $ref: '#/components/schemas/UserProfile'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
